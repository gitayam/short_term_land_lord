name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: stll_db_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov flake8

    - name: Run linting
      run: |
        flake8 app tests --count --max-complexity=10 --max-line-length=127 --statistics

    - name: Run tests with coverage
      env:
        FLASK_APP: app.py
        FLASK_ENV: testing
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/stll_db_test
        SECRET_KEY: test_key
      run: |
        pytest tests/ --cov=app --cov-report=xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: true

  docker:
    runs-on: ubuntu-latest
    needs: test
    steps:
    - uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: false
        load: true
        tags: stll:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker Compose
      run: |
        cp .env.example .env
        docker-compose up -d
        sleep 10
        docker-compose ps
        curl -f http://localhost:5001/health || exit 1
        docker-compose down

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Security scan dependencies
      uses: snyk/actions/python@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

    - name: Run Bandit security scan
      run: |
        pip install bandit
        bandit -r app/ -ll -ii -x tests/ 